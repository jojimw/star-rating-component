{"version":3,"sources":["components/StarRating/index.js","App.js","serviceWorker.js","index.js"],"names":["Star","props","selected","onClick","color","defaultColor","onHover","disabled","hovered","onFocus","colored","className","onMouseOver","aria-hidden","style","StarRating","state","starsSelected","starsHovered","change","bind","getColor","handleStarHover","handleMouseEnter","handleMouseLeave","this","setState","colors","starPosition","length","totalStars","comments","onMouseEnter","onMouseLeave","Array","map","n","i","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"u5BAIA,IAAMA,EAAO,SAAAC,GAAS,MAE8EA,EAAxFC,gBAFU,SAEQC,EAAsEF,EAAtEE,QAASC,EAA6DH,EAA7DG,MAAOC,EAAsDJ,EAAtDI,aAAcC,EAAwCL,EAAxCK,QAASC,EAA+BN,EAA/BM,SAAUC,EAAqBP,EAArBO,QAASC,EAAYR,EAAZQ,QAC9EC,GAAYH,GAAYL,GAAaM,IAAaC,GAAWP,EACnE,OACI,yBAAKS,UAAU,gBAAgBC,YAAaN,GACxC,uBACIK,UAAS,wBACTE,cAAY,OACZV,QAASA,EACTW,MAAOJ,EAAU,CACTN,MAAOA,GACP,CACAA,MAAOC,OAoFhBU,E,YA3EX,WAAYd,GAAQ,IAAD,8BACf,4CAAMA,KACDe,MAAQ,CACTC,cAAe,EACfC,aAAc,EACdT,SAAS,GAEb,EAAKU,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBACvB,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,gBACxB,EAAKI,iBAAmB,EAAKA,iBAAiBJ,KAAtB,gBAXT,E,oEAcZH,GACHQ,KAAKC,SAAL,KAAmBD,KAAKT,MAAxB,CAA+BC,qB,iCAGvB,IACAU,EAAWF,KAAKxB,MAAhB0B,OACFC,EAAeH,KAAKT,MAAMP,QAAUgB,KAAKT,MAAME,aAAeO,KAAKT,MAAMC,cAE/E,OADsBW,EAAeD,EAAOE,OAASF,EAAOA,EAAOE,OAAS,GAAKF,EAAOC,EAAe,K,sCAI3FV,GACZO,KAAKC,SAAL,KAAmBD,KAAKT,MAAxB,CAA+BE,oB,yCAI/BO,KAAKC,SAAL,KAAmBD,KAAKT,MAAxB,CAA+BP,SAAS,O,yCAIxCgB,KAAKC,SAAL,KAAmBD,KAAKT,MAAxB,CAA+BP,SAAS,EAAOS,aAAc,O,+BAIvD,IAAD,SAE0CO,KAAKxB,MAA5C6B,EAFH,EAEGA,WAAYC,EAFf,EAEeA,SAAU1B,EAFzB,EAEyBA,aAFzB,EAG4CoB,KAAKT,MAA9CC,EAHH,EAGGA,cAAeC,EAHlB,EAGkBA,aAAcT,EAHhC,EAGgCA,QACrC,OACI,yBAAKE,UAAU,mBACX,yBAAKA,UAAU,gBAAf,uBACA,yBACIA,UAAU,cACVqB,aAAcP,KAAKF,iBACnBU,aAAcR,KAAKD,kBAElB,YAAIU,MAAMJ,IAAaK,IAAI,SAACC,EAAGC,GAAJ,OACxB,kBAAC,EAAD,CACIC,IAAKD,EACLnC,SAAUmC,EAAIpB,EACdV,SAAUW,GAAgBmB,EAC1B7B,QAAS6B,EAAInB,EACbf,QAAS,kBAAM,EAAKgB,OAAOkB,EAAI,IAC/BjC,MAAO,EAAKiB,WACZf,QAAS,kBAAM,EAAKgB,gBAAgBe,EAAI,IACxC5B,QAASA,EACTJ,aAAcA,OAI1B,yBAAKM,UAAU,wBACVO,EAAea,EAASF,SAAYpB,GAAWQ,EAAgBc,EAASF,OACrEE,EAASA,EAASF,OAAS,GAC3BE,EAAStB,EAAUS,EAAe,EAAID,EAAgB,S,GApErDsB,IAAMC,WCHhBC,MAjBf,WAKC,OACC,yBAAK9B,UAAU,OACd,kBAAC,EAAD,CACCmB,WAAY,EACZC,SARc,CAAC,WAAY,WAAY,cAAe,WAAY,iBASlEJ,OARY,CAAC,UAAW,UAAW,UAAW,UAAW,WASzDtB,aARkB,cCIFqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.26d6388f.chunk.js","sourcesContent":["import React from 'react'\n\nimport \"./index.scss\";\n\nconst Star = props => {\n    // destructuring props\n    const { selected = false, onClick, color, defaultColor, onHover, disabled, hovered, onFocus } = props\n    const colored = (!disabled && selected) || hovered || (!onFocus && selected)\n    return (\n        <div className=\"star__wrapper\" onMouseOver={onHover}>\n            <i\n                className={`fa fa-star star__icon`}\n                aria-hidden=\"true\"\n                onClick={onClick}\n                style={colored ? {\n                        color: color\n                    } : {\n                        color: defaultColor\n                    }\n                }\n            />\n        </div>\n    )\n};\n\nclass StarRating extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            starsSelected: 0,\n            starsHovered: 0,\n            onFocus: false\n        };\n        this.change = this.change.bind(this);\n        this.getColor = this.getColor.bind(this);\n        this.handleStarHover = this.handleStarHover.bind(this);\n        this.handleMouseEnter = this.handleMouseEnter.bind(this);\n        this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    }\n\n    change(starsSelected) {\n        this.setState({ ...this.state, starsSelected });\n    }\n\n    getColor() {\n        const { colors } = this.props\n        const starPosition = this.state.onFocus ? this.state.starsHovered : this.state.starsSelected\n        const selectedColor = starPosition > colors.length ? colors[colors.length - 1] : colors[starPosition - 1]\n        return selectedColor\n    }\n\n    handleStarHover(starsHovered) {\n        this.setState({ ...this.state, starsHovered });\n    }\n\n    handleMouseEnter() {\n        this.setState({ ...this.state, onFocus: true })\n    }\n\n    handleMouseLeave() {\n        this.setState({ ...this.state, onFocus: false, starsHovered: 0 })\n    }\n\n\n    render() {\n        // destructing props and state\n        const { totalStars, comments, defaultColor } = this.props;\n        const { starsSelected, starsHovered, onFocus } = this.state;\n        return (\n            <div className=\"star__container\">\n                <div className=\"star__header\">Tell us your rating</div>\n                <div\n                    className=\"star-rating\"\n                    onMouseEnter={this.handleMouseEnter}\n                    onMouseLeave={this.handleMouseLeave}\n                >\n                    {[...Array(totalStars)].map((n, i) => (\n                        <Star\n                            key={i}\n                            selected={i < starsSelected}\n                            disabled={starsHovered <= i}\n                            hovered={i < starsHovered}\n                            onClick={() => this.change(i + 1)}\n                            color={this.getColor()}\n                            onHover={() => this.handleStarHover(i + 1)}\n                            onFocus={onFocus}\n                            defaultColor={defaultColor}\n                        />\n                    ))}\n                </div>\n                <div className=\"star__rating-comment\">\n                    {starsHovered > comments.length || (!onFocus && starsSelected > comments.length) ?\n                        comments[comments.length - 1] :\n                        comments[onFocus ? starsHovered - 1 : starsSelected - 1]\n                    } \n                </div>\n            </div>\n        );\n    }\n}\n\nexport default StarRating;","import React from 'react';\n\nimport './App.scss';\nimport StarRating from \"./components/StarRating\";\n\nfunction App() {\n\tconst comments = [\"1 - Poor\", \"2 - Fair\", \"3 - Average\", \"4 - Good\", \"5 - Excellent\"];\n\tconst colors = [\"#B53229\", \"#E9665E\", \"#E2E542\", \"#4DEB68\", \"#279539\"]\n\tconst defaultColor = \"#C5C8CA\"\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<StarRating\n\t\t\t\ttotalStars={5}\n\t\t\t\tcomments={comments}\n\t\t\t\tcolors={colors}\n\t\t\t\tdefaultColor={defaultColor}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}